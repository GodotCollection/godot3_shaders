[gd_scene load_steps=5 format=2]

[ext_resource path="res://black.png" type="Texture" id=1]

[sub_resource type="CanvasItemMaterial" id=1]

[sub_resource type="Shader" id=2]
code = "/////modificado por jorge flores.p --
//Gracias a ....Created by russ in 2017-03-06
//https://www.shadertoy.com/view/XsfczB
//
// converted for Godot 3.2 shader by jospic (jospic@gmail.com)
    
shader_type canvas_item;

const int iter = 100;
const float eps = 0.001;
const float far = 20.;

const vec3 lDir0 = vec3(normalize(vec3(1,2,1)));
const vec3 lDir1 = vec3(normalize(vec3(-1,1.0,-2)));
const vec3 lCol0 = vec3(1,.8,.5); 
const vec3 lCol1 = vec3(.6,0.8,1); 

uniform float PI = 3.1415926;

///-------------------------------------
const int MAX_RAY_STEPS = 64;
const float RAY_STOP_TRESHOLD = 0.0001;
const int MENGER_ITERATIONS = 5;
///-------------------------------------

uniform float NumCol;

float maxcomp(in vec3 p ) { return max(p.x,max(p.y,p.z));}

float sdBox( vec3 p, vec3 b )
{
  vec3  di = abs(p) - b;
  float mc = maxcomp(di);
  return min(mc,length(max(di,0.0)));
}


//--------------------------------------------

//oooooooooooooooooooooooooooooooooooooooooooooooooooo
float sdCross(vec3 p) {
	p = abs(p);
	vec3 d = vec3(max(p.x, p.y),
				  max(p.y, p.z),
				  max(p.z, p.x));
	return min(d.x, min(d.y, d.z)) - (1.0 / 3.0);
}

float sdCrossRep(vec3 p) {
	vec3 q = mod(p + 1.0, 2.0) - 1.0;
	return sdCross(q);
}

float sdCrossRepScale(vec3 p, float s) {
	return sdCrossRep(p * s) / s;	
}





float differenceSDF(float distA, float distB) 
{
    return max(distA, -distB);
}

//---------------------

float sdSphere( vec3 p, float s1 )
{
   vec4 s = vec4(0, s1, 9, s1);
   return  length(p-s.xyz)-s.w;   
}

float sdCylinder( vec3 p, vec2 h )
{
    vec2 d = abs(vec2(length(p.xz),p.y)) - h;
    return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

vec2 opU(vec2 d1, vec2 d2 ) {
  vec2 resp;
    if (d1.x < d2.x){ 
        resp = d1;
    }
    else
    {
        resp = d2;
    }
     
   return resp; 
}


float diso( vec3 p)
{
    
    vec2 res=vec2(9999.,0.0);
    float dif1;
   
    p.z=mod(p.z,2.0);
    float sdcy1 =sdCylinder(  p.yzx, vec2(6.0,6.0) ) ;

     float sdcy2 =sdCylinder(  p.yzx, vec2(1.9,6.78) ) ;

    dif1 = differenceSDF(sdcy1,sdcy2);

    res=opU(res, vec2(dif1,9.0) );

    return res.x;
}  

//--------------------------
float DE(vec3 p, float iTime) {
	
    
    float scale = 0.35;
    vec2 res=vec2(9999.9,0.0) ;
    

    float dist, dist1;
     dist=-999.0;
     dist =diso(p);
 
	for ( int i = 0; i < MENGER_ITERATIONS; i++) {
		dist = max(dist, -sdCrossRepScale(p, scale));
		scale *= 3.0;
	}

	

    if ( mod( floor(iTime), 5.0)>0.4 )
    {
    	res=opU(res, vec2(dist,8.0) );
	}
    else
    {
    
        res=opU(res, vec2(dist, 7)  );
	}   
   
    //NumCol = res.y;
 	
	return res.x;
}

//oooooooooooooooooooooooooooooooooooooooooooooooooooo



vec2 march(vec3 ro, vec3 rd, float iTime){
	float t=0. , d = far, it = 0.;
    for (int i=0;i<iter;i++){
     	t += (d = DE(ro+t*rd, iTime));
        if(d<eps || t> far) break;
        it += 1.;
    }
    return vec2(t,it/float(iter));
}

float getShadow(vec3 p, vec3 n, vec3 ld, float iTime){
    p +=  2. * eps * n;
    float t=0.,d=far;
    for(int i=0;i<50;i++){
        t += (d=DE(p + t*ld, iTime));
        if (d<eps || t>3.) break;
    }
    return t<=3. ? 0.1 : 1. ;
}

vec3 getRay(vec3 ro, vec3 look, vec2 uv){
    vec3 f = normalize(look - ro);
    vec3 r = normalize(vec3(f.z,0,-f.x));
    vec3 u = cross (f,r);
    return normalize(f + uv.x * r + uv.y * u);
}

vec3 getNorm(vec3 p, float iTime){
    vec2 e = vec2(eps, 0);
    return normalize(vec3(DE(p+e.xyy, iTime)-DE(p-e.xyy, iTime),DE(p+e.yxy, iTime)-DE(p-e.yxy, iTime),DE(p+e.yyx,iTime)-DE(p-e.yyx,iTime)));
}

vec3 ilight(vec3 p, vec3 n, float iTime)
{
    vec3 col = vec3(0.01);
    
    for(int i=0;i<2;i++){
        vec3 ld = (i==0) ? lDir0 : lDir1;
        float diff = max(dot(n, (ld)),0.);
        diff *= getShadow(p, n, ld, iTime);
        col += diff * (i==0 ? lCol0 : lCol1);
    }
    return col * .7;
}





//----------------------------------------------------

// Single rotation function - return matrix
mat2 r2(float a){ 
  float c = cos(a); float s = sin(a); 
  return mat2(vec2(c, s), vec2(-s, c)); 
}
//--------------------

// iMouse pos function - take in a vec3 like ro
// simple pan and tilt and return that vec3



//-----------------------------------

vec3 getSphereColor(int i)
{
    
    float m;
        
	if(i==0 )
    {
    
        return vec3(0.,0.,0.);
    }
    
    if(i== 1 )
    {
        
        return vec3(0.,0.,1.);
    } 
    if(i== 2 )
    {
       return vec3(0.,1.,0.);
    } 
    if(i== 3 )
    {
        return vec3(0.,1.,1.);
    } 
    if(i== 4 )
    {
        return vec3(1., 0., 0.);
    } 
    
    if(i== 5 )
    {
        return vec3(1., 0.,1.);
        } 
    if(i== 6 )
    {
        
    	//return vec3(1., 1., 0.);
         
    } 
        
    if(i== 7 )
    {
        return vec3(1., 1., 1.);
       } 
    if(i== 8 )
    {
       
        return vec3(0.425, 0.56, 0.9); 
       } 
    if(i== 9 )
    {
        
        return vec3(0.5, 0.6, 0.6); 
     } 
    if(i== 10 )
    {
        return vec3(0.0, 1.0, 0.0);
    } 
    
    
    if(i== 11 )
    {
        return  vec3(0.5, 0.8, 0.9);
    } 
    
    
    
  
    	
}

//----------------------------------------------------

void fragment()
{
    
    float time = TIME * 0.5;
   
	vec2 uv = (FRAGCOORD.xy - .5 * (1.0 / SCREEN_PIXEL_SIZE).xy) / (1.0 / SCREEN_PIXEL_SIZE).y;
  
    vec3 ro = vec3(0.0,-1.0+0.5*sin(time),-5.0+time*0.5);
   
    vec3 rd =normalize(vec3(uv,1.0) );
    
    vec2 hit = march(ro, rd, time);
    vec3 p = ro + hit.x*rd;
    vec3 nor= getNorm(p, time);
    
    vec3 col = hit.x<far ? ilight(p, nor, time) : vec3(.1*(1.-length(uv)));
    
	float scale = 0.35;
    vec2 res=vec2(9999.9,0.0) ;
    

    float dist, dist1;
     dist=-999.0;
     dist =diso(p);
 
	for ( int i = 0; i < MENGER_ITERATIONS; i++) {
		dist = max(dist, -sdCrossRepScale(p, scale));
		scale *= 3.0;
	}

	if ( mod( floor(time), 5.0)>0.4 )
    {
    	res=opU(res, vec2(dist,8.0) );
	}
    else
    {
    
        res=opU(res, vec2(dist, 7)  );
	}   
       
    vec3 colobj=getSphereColor( int( res.y ));
 
    col *=(colobj);
    
    
    col += pow(hit.y,3.);
	COLOR = vec4(sqrt(col),1.0);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/PI = 3.14159
shader_param/NumCol = null

[node name="Node2D" type="Node2D"]
material = SubResource( 1 )

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 3 )
margin_left = 2.0
margin_top = 2.0
margin_right = 1026.0
margin_bottom = 602.0
texture = ExtResource( 1 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}
